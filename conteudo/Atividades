Atividade 1

// Define que este arquivo pertence ao pacote que acabamos de criar
package com.example.myapplication.atividade4


fun encontrarMaiorDeTres(a: Int, b: Int, c: Int): Int {
    return maxOf(a, b, c)
}

fun encontrarMaiorEmLista(lista: List<Int>): Int? {
    if (lista.isEmpty()) {
        return null
    }

    var maiorNumeroEncontrado = lista[0]

    for (numero in lista) {
        maiorNumeroEncontrado = encontrarMaiorDeTres(maiorNumeroEncontrado, numero, numero)
    }

    return maiorNumeroEncontrado
}

fun main() {

    val maior1 = encontrarMaiorDeTres(10, 50, 20)
    println("   -> O maior entre 10, 50 e 20 e: $maior1")

    val maior2 = encontrarMaiorDeTres(-5, -1, -100)
    println("   -> O maior entre -5, -1 e -100 e: $maior2")

    println()

    val numeros = listOf(12, 45, 7, 88, 34, 99, 5)
    val maiorDaLista = encontrarMaiorEmLista(numeros)
    println("   -> Na lista $numeros, o maior valor e: $maiorDaLista")

    val listaVazia = emptyList<Int>()
    val maiorDaListaVazia = encontrarMaiorEmLista(listaVazia)
    println("   -> Na lista vazia, o resultado e: $maiorDaListaVazia")
}


_________________________________________________________________________________

Atividade 2

package com.example.myapplication.atividade2

data class Produto(val nome: String, val preco: Double)

fun main() {

    val produto1 = Produto("Notebook", 4500.0)
    println("Produto criado: $produto1")

    val listaDeProdutos = listOf(
        Produto("Mouse", 150.0),
        Produto("Teclado", 300.0)
    )

    val produtosCaros = listaDeProdutos.filter { it.preco > 200.0 }
    println("Produtos com preco maior que 200: $produtosCaros")
}

_________________________________________________________________________________

Atividade 3

package com.example.myapplication.atividade3

fun filtrarETransformarNomes(nomes: List<String>): List<String> {
    return nomes
        .filter { nome ->
            val comecaComA = nome.startsWith("a", ignoreCase = true)
            val maiorQue3 = nome.length > 3

            comecaComA && maiorQue3
        }
        .map { nomeFiltrado ->
            nomeFiltrado.uppercase()
        }
}

fun main() {

    val listaDeNomes = listOf(
        "ana", "Beatriz", "Carlos", "Amanda", "antonio", "Eva", "Alex", "Al"
    )

    println("Lista Original: $listaDeNomes")
    println()

    val nomesFiltrados = filtrarETransformarNomes(listaDeNomes)

    println("Nomes que comeÃ§am com 'A' e tem mais de 3 letras (em maiusculas):")
    println(nomesFiltrados)
}

_________________________________________________________________________________

Atividade 4

package com.example.myapplication.atividade4

fun String.inverterESubstituirVogais(): String {
    val stringInvertida = this.reversed()
    val regex = Regex("[aeiou]", RegexOption.IGNORE_CASE)

    return stringInvertida.replace(regex, "*")
}

fun main() {

    val texto1 = "Kotlin"
    val texto2 = "Desenvolvimento Android"
    val texto3 = "Exercicio com Vogais"

    val resultado1 = texto1.inverterESubstituirVogais()
    val resultado2 = texto2.inverterESubstituirVogais()
    val resultado3 = texto3.inverterESubstituirVogais()


    println("Original: '$texto1'")
    println("Resultado: '$resultado1'")
    println()

    println("Original: '$texto2'")
    println("Resultado: '$resultado2'")
    println()

    println("Original: '$texto3'")
    println("Resultado: '$resultado3'")
}

_________________________________________________________________________________

Atividade 5

package com.example.myapplication.atividade5

sealed class ResultadoOperacao {
    data class Sucesso(val valor: Int) : ResultadoOperacao()

    data class Falha(val mensagem: String) : ResultadoOperacao()

    object Pendente : ResultadoOperacao()
}

fun processarResultado(resultado: ResultadoOperacao) {

    when (resultado) {
        is ResultadoOperacao.Sucesso -> {
            println("O resultado da operacao foi: ${resultado.valor}")
        }
        is ResultadoOperacao.Falha -> {
            println("Oprecao falhou. Motivo: ${resultado.mensagem}")
        }
        ResultadoOperacao.Pendente -> {
            println("Operacao pendente. Por favor, aguarde...")
        }
    }
}

fun main() {

    val resultado1: ResultadoOperacao = ResultadoOperacao.Sucesso(120)
    val resultado2: ResultadoOperacao = ResultadoOperacao.Falha("Conexao com a internet perdida.")
    val resultado3: ResultadoOperacao = ResultadoOperacao.Pendente

    println("Testando o caso de Sucesso:")
    processarResultado(resultado1)

    println("\nTestando o caso de Falha:")
    processarResultado(resultado2)

    println("\nTestando o caso Pendente:")
    processarResultado(resultado3)
}
